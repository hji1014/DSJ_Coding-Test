"""

[단어 수학]
- 문제 설명
: 민식이는 수학학원에서 단어 수학 문제를 푸는 숙제를 받았다.
단어 수학 문제는 N개의 단어로 이루어져 있으며, 각 단어는 알파벳 대문자로만 이루어져 있다. 이때, 각 알파벳 대문자를 0부터 9까지의 숫자 중 하나로 바꿔서 N개의 수를 합하는 문제이다. 같은 알파벳은 같은 숫자로 바꿔야 하며, 두 개 이상의 알파벳이 같은 숫자로 바뀌어지면 안 된다.
예를 들어, GCF + ACDEB를 계산한다고 할 때, A = 9, B = 4, C = 8, D = 6, E = 5, F = 3, G = 7로 결정한다면, 두 수의 합은 99437이 되어서 최대가 될 것이다.
N개의 단어가 주어졌을 때, 그 수의 합을 최대로 만드는 프로그램을 작성하시오.

- 입력
: 첫째 줄에 단어의 개수 N(1 ≤ N ≤ 10)이 주어진다. 둘째 줄부터 N개의 줄에 단어가 한 줄에 하나씩 주어진다. 단어는 알파벳 대문자로만 이루어져있다. 모든 단어에 포함되어 있는 알파벳은 최대 10개이고, 수의 최대 길이는 8이다. 서로 다른 문자는 서로 다른 숫자를 나타낸다.

- 출력
: 첫째 줄에 주어진 단어의 합의 최댓값을 출력한다.

"""
# 내 풀이
"""
틀린 이유 : 접근 방법이 생각이 안남
"""
n = int(input())
words = []
for i in range(n):
    words.append(input())

words_len = []
for i in range(n):
    words_len.append(len(words[i]))
max_len = max(words_len)
num = {}
for i in range(max_len):

a = []
print(a + list(words[0]))

# 블로그 풀이
"""
같은 알파벳은 같은 숫자여야하고 서로 다른 알파벳이 같은 숫자를 가지면 안된다.
예를 들면, AAA + AAA가 최대가 되기 위해서는 A가 9면된다.
GCF + ACDEB가 최대가 되기 위해서는 자리수가 높은 A, C, G, D, E, B, F 이런순으로 높은 숫자를 가지면 된다.

이를 일반화 하기 위해서

A는 만의자리 수 이기 때문에 10000 값을 주고
C는 천의자리 수와 십의자리 수를 둘 다 가지기 때문에 1010 값을 준다.
G는 백의자리 수를 가지기 때문에 100
D는 백의자리 수를 가지기 때문에 100
E는 십의자리 수를 가지기 때문에 10
B는 일의자리 수를 가지기 때문에 1
F도 일의자리 수를 가지기 때문에 1을 준다.

이렇게 정렬을 해놓고 값이 높은 알파벳 순서대로 9부터 숫자를 준다.

A = 10000 * 9 = 90000
C = 1010 * 8 = 8080
G = 100 * 7 = 700
D = 100 * 6 = 600
E = 10 * 5 = 50
B = 1 * 4 = 4
F = 1 * 3 = 3

이를 다 더해주면 99437이라는 값이 나오게 되는 원리이다.
G와 D, B와 F처럼 같은 값을 가지는 알파벳끼리는 누구한테 더 높은 숫자를 주는지는 중요하지 않다.
각 알파벳이 가지는 숫자가 궁금한 것이 아니고 주어진 단어의 합의 최대값을 물어봤기 때문에 서열이 같은 알파벳 끼리의 누가 더 높은 수를 가지는지는 중요하지 않고 합이 중요하다.

ref : https://jokerldg.github.io/algorithm/2021/03/13/word-math.html
"""
import math
n = int(input())
words = []
for i in range(n):
    words.append(input())

dict = {}
for word in words:                                      # 딕셔너리에 알파벳별로 값을 집어 넣어준다.
    square_root = len(word) - 1                         # 길이를 계산하여 10^square_root만큼 넣어주기 위해. -1을 하는 이유는 맨뒤는 1의 자리이므로 0 제곱을 해야함
    for c in word:
        if c in dict:                                   # 만약 이미 값이 있는 경우 추가로 값을 더해줌
            dict[c] += math.pow(10, square_root)
        else:                                           # 값이 없는 경우 그대로 넣어줌
            dict[c] = math.pow(10, square_root)
        square_root -= 1                                # 제곱할 수를 하나씩 뺌
dict = sorted(dict.values(), reverse=True)              # 딕셔너리를 큰값부터 쓰기 위해 정렬
result, m = 0, 9
for i in dict:                                          # 결과값 계산
    result += i * m
    m -= 1

print(int(result))
